<?xml version='1.0' encoding='UTF-8'?>
<testsuite name="JUnit Jupiter" tests="200" skipped="7" failures="0" errors="0" time="18.6" hostname="travis-job-zuinnote-hadoopoffice-388471255.travisci.net" timestamp="2018-06-05T20:41:05">
<properties>
<property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
<property name="file.encoding" value="UTF-8"/>
<property name="file.encoding.pkg" value="sun.io"/>
<property name="file.separator" value="/"/>
<property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
<property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
<property name="java.class.path" value="/home/travis/build/ZuInnoTe/hadoopoffice/fileformat/build/classes/java/test:/home/travis/build/ZuInnoTe/hadoopoffice/fileformat/build/resources/test:/home/travis/build/ZuInnoTe/hadoopoffice/fileformat/build/classes/java/main:/home/travis/build/ZuInnoTe/hadoopoffice/fileformat/build/resources/main:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.poi/poi-ooxml/3.17/7d8c44407178b73246462842bf1e206e99c8e0a/poi-ooxml-3.17.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.poi/poi/3.17/ae92292a2043888b40d418da97dc0b669fde326/poi-3.17.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.junit.jupiter/junit-jupiter-engine/5.1.1/92ae5e81f6459edc0fd1cb74612c910a01622c7/junit-jupiter-engine-5.1.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.junit.jupiter/junit-jupiter-api/5.1.1/fcca73c9c2825c9a966380c6d146a71acba233ca/junit-jupiter-api-5.1.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-codec/commons-codec/1.10/4b95f4897fa13f2cd904aee711aeafc0c5295cd8/commons-codec-1.10.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-collections4/4.1/a4cf4688fe1c7e3a63aa636cc96d013af537768e/commons-collections4-4.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.poi/poi-ooxml-schemas/3.17/890114bfa82f5b6380ea0e9b0bf49b0af797b414/poi-ooxml-schemas-3.17.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.github.virtuald/curvesapi/1.04/3386abf821719bc89c7685f9eaafaf4a842f0199/curvesapi-1.04.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-engine/1.1.1/62af0a28f8c153b940e8abcb485f25dd07ffe633/junit-platform-engine-1.1.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-commons/1.1.1/36fca464a84454cf56ae2759a8ba18d6d99d1113/junit-platform-commons-1.1.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apiguardian/apiguardian-api/1.0.0/3ef5276905e36f4d8055fe3cb0bdcc7503ffc85d/apiguardian-api-1.0.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.opentest4j/opentest4j/1.0.0/6f09c598e9ff64bf0ce2fa7e7de49a99ba83c0b4/opentest4j-1.0.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.xmlbeans/xmlbeans/2.6.0/29e80d2dd51f9dcdef8f9ffaee0d4dc1c9bbfc87/xmlbeans-2.6.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/stax/stax-api/1.0.1/49c100caf72d658aca8e58bd74a4ba90fa2b0d70/stax-api-1.0.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-ext-jdk15on/1.58/83a9e739d9c718180ba544fe007a67ca3a61cad/bcprov-ext-jdk15on-1.58.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcpkix-jdk15on/1.58/15a760a039b040e767a75c77ffcc4ff62558f903/bcpkix-jdk15on-1.58.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.santuario/xmlsec/2.1.0/99964d24525fa5ffbfe00bfc02085fc2e3a0f98d/xmlsec-2.1.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.hadoop/hadoop-common/2.7.0/b67be0ff22ae931d900c1a511cb7d777fd5b07c7/hadoop-common-2.7.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.hadoop/hadoop-mapreduce-client-common/2.7.0/d0e43e6ef2b4df32b8e9721bd1ae0a647884b3ab/hadoop-mapreduce-client-common-2.7.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.logging.log4j/log4j-api/2.8.1/e801d13612e22cad62a3f4f3fe7fdbe6334a8e72/log4j-api-2.8.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.bouncycastle/bcprov-jdk15on/1.58/2c9aa1c4e3372b447ba5daabade4adf2a2264b12/bcprov-jdk15on-1.58.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.hadoop/hadoop-mapreduce-client-core/2.7.0/4046f0a3e4adc3b6cc9e4f3b455eb0a954d01faf/hadoop-mapreduce-client-core-2.7.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.avro/avro/1.7.4/416e7030879814f52845b97f04bb50ecd1cef372/avro-1.7.4.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.hadoop/hadoop-auth/2.7.0/10351dee7ef55affc959f14b4357bbb00ed40ea0/hadoop-auth-2.7.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.curator/curator-recipes/2.7.1/a2c180efc6a38a4f8c9197eb35bb4eb5716cd2fa/curator-recipes-2.7.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.curator/curator-framework/2.7.1/8c7b1eeb78e43bb91ea737111ba3dec0512be876/curator-framework-2.7.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.curator/curator-client/2.7.1/a591dfc085db3e9d4d480381cc7e6ae8a26b34af/curator-client-2.7.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.hadoop/hadoop-yarn-client/2.7.0/2d46d97a8bae442408a1db38c36c4de128aae763/hadoop-yarn-client-2.7.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.hadoop/hadoop-yarn-server-common/2.7.0/97ddd9bc8fd2531dc4601c41be50763a9f63a905/hadoop-yarn-server-common-2.7.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.hadoop/hadoop-yarn-common/2.7.0/acdcfa98feae91bc4ab7f72c5648d50163a74725/hadoop-yarn-common-2.7.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.directory.server/apacheds-kerberos-codec/2.0.0-M15/1c16e4e477183641c5f0dd5cdecd27ec331bacb5/apacheds-kerberos-codec-2.0.0-M15.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.zookeeper/zookeeper/3.4.6/1b2502e29da1ebaade2357cd1de35a855fa3755/zookeeper-3.4.6.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.directory.server/apacheds-i18n/2.0.0-M15/71c61c84683152ec2a6a65f3f96fe534e304fa22/apacheds-i18n-2.0.0-M15.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.directory.api/api-asn1-api/1.0.0-M20/5e6486ffa3125ba44dc410ead166e1d6ba8ac76d/api-asn1-api-1.0.0-M20.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.directory.api/api-util/1.0.0-M20/a871abf060b3cf83fc6dc4d7e3d151fce50ac3cb/api-util-1.0.0-M20.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-log4j12/1.7.10/b3eeae7d1765f988a1f45ea81517191315c69c9e/slf4j-log4j12-1.7.10.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.slf4j/slf4j-api/1.7.22/a1c83373863cec7ae8d89dc1c5722d8cb6ec0309/slf4j-api-1.7.22.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.codehaus.woodstox/woodstox-core-asl/4.4.1/84fee5eb1a4a1cefe65b6883c73b3fa83be3c1a1/woodstox-core-asl-4.4.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-httpclient/commons-httpclient/3.1/964cd74171f427720480efdec40a7c7f6e58426a/commons-httpclient-3.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/net.java.dev.jets3t/jets3t/0.9.0/792bc96ee7e57b89f472aa0cb5a31015b9f59c96/jets3t-0.9.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpclient/4.2.5/666e26e76f2e87d84e4f16acb546481ae1b8e9a6/httpclient-4.2.5.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.hadoop/hadoop-yarn-api/2.7.0/3f8445cfc9739af9fd593accc39d5c1102ee805a/hadoop-yarn-api-2.7.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.hadoop/hadoop-annotations/2.7.0/ed3e60c290836577c1c6c37b853220e993837c94/hadoop-annotations-2.7.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.google.guava/guava/16.0.1/5fa98cd1a63c99a44dd8d3b77e4762b066a5d0c5/guava-16.0.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-cli/commons-cli/1.2/2bf96b7aa8b611c177d329452af1dc933e14501c/commons-cli-1.2.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-math3/3.1.1/6719d757a98ff24a83d9d727bef9cec83f59b6e1/commons-math3-3.1.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/xmlenc/xmlenc/0.52/d82554efbe65906d83b3d97bd7509289e9db561a/xmlenc-0.52.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-io/commons-io/2.4/b1b6ea3b7e4aa4f492509a4952029cd8e48019ad/commons-io-2.4.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-net/commons-net/3.1/2298164a7c2484406f2aa5ac85b205d39019896f/commons-net-3.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-configuration/commons-configuration/1.6/32cadde23955d7681b0d94a2715846d20b425235/commons-configuration-1.6.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-collections/commons-collections/3.2.1/761ea405b9b37ced573d2df0d1e3a4e0f9edc668/commons-collections-3.2.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/javax.servlet/servlet-api/2.5/5959582d97d8b61f4d154ca9e495aafd16726e34/servlet-api-2.5.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.mortbay.jetty/jetty/6.1.26/2f546e289fddd5b1fab1d4199fbb6e9ef43ee4b0/jetty-6.1.26.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.mortbay.jetty/jetty-util/6.1.26/e5642fe0399814e1687d55a3862aa5a3417226a9/jetty-util-6.1.26.jar:/home/travis/.gradle/caches/modules-2/files-2.1/javax.servlet.jsp/jsp-api/2.1/63f943103f250ef1f3a4d5e94d145a0f961f5316/jsp-api-2.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.sun.jersey/jersey-json/1.9/1aa73e1896bcc7013fed247157d7f676226eb432/jersey-json-1.9.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.sun.jersey.contribs/jersey-guice/1.9/5963c28c47df7e5d6ad34cec80c071c368777f7b/jersey-guice-1.9.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.sun.jersey/jersey-server/1.9/3a6ea7cc5e15c824953f9f3ece2201b634d90d18/jersey-server-1.9.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.sun.jersey/jersey-client/1.9/d3c4b2b5f89db32c96ceddcb863684821910a7bb/jersey-client-1.9.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.sun.jersey/jersey-core/1.9/8341846f18187013bb9e27e46b7ee00a6395daf4/jersey-core-1.9.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-digester/commons-digester/1.8/dc6a73fdbd1fa3f0944e8497c6c872fa21dca37e/commons-digester-1.8.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-beanutils/commons-beanutils-core/1.8.0/175dc721f87e4bc5cc0573f990e28c3cf9117508/commons-beanutils-core-1.8.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-beanutils/commons-beanutils/1.7.0/5675fd96b29656504b86029551973d60fb41339b/commons-beanutils-1.7.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-logging/commons-logging/1.1.3/f6f66e966c70a83ffbdb6f17a0919eaf7c8aca7f/commons-logging-1.1.3.jar:/home/travis/.gradle/caches/modules-2/files-2.1/log4j/log4j/1.2.17/5af35056b4d257e4b64b9e8069c0746e8b08629f/log4j-1.2.17.jar:/home/travis/.gradle/caches/modules-2/files-2.1/commons-lang/commons-lang/2.6/ce1edb914c94ebc388f086c6827e8bdeec71ac2/commons-lang-2.6.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.codehaus.jackson/jackson-jaxrs/1.9.13/534d72d2b9d6199dd531dfb27083dd4844082bba/jackson-jaxrs-1.9.13.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.codehaus.jackson/jackson-xc/1.9.13/e3480072bc95c202476ffa1de99ff7ee9149f29c/jackson-xc-1.9.13.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.codehaus.jackson/jackson-mapper-asl/1.9.13/1ee2f2bed0e5dd29d1cb155a166e6f8d50bbddb7/jackson-mapper-asl-1.9.13.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.codehaus.jackson/jackson-core-asl/1.9.13/3c304d70f42f832e0a86d45bd437f692129299a4/jackson-core-asl-1.9.13.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.google.protobuf/protobuf-java/2.5.0/a10732c76bfacdbd633a7eb0f7968b1059a65dfa/protobuf-java-2.5.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.google.code.gson/gson/2.2.4/a60a5e993c98c864010053cb901b7eab25306568/gson-2.2.4.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.jcraft/jsch/0.1.42/a86104b0f2e0c0bab5b0df836065823a99b5e334/jsch-0.1.42.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.google.code.findbugs/jsr305/3.0.0/5871fb60dc68d67da54a663c3fd636a10a532948/jsr305-3.0.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.htrace/htrace-core/3.1.0-incubating/f73606e7c9ede5802335c290bf47490ad6d51df3/htrace-core-3.1.0-incubating.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.commons/commons-compress/1.4.1/b02e84a993d88568417536240e970c4b809126fd/commons-compress-1.4.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.google.inject.extensions/guice-servlet/3.0/610cde0e8da5a8b7d8efb8f0b8987466ffebaaf9/guice-servlet-3.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/io.netty/netty/3.7.0.Final/7a8c35599c68c0bf383df74469aa3e03d9aca87/netty-3.7.0.Final.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.sun.xml.bind/jaxb-impl/2.2.3-1/56baae106392040a45a06d4a41099173425da1e6/jaxb-impl-2.2.3-1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/javax.xml.bind/jaxb-api/2.2.2/aeb3021ca93dde265796d82015beecdcff95bf09/jaxb-api-2.2.2.jar:/home/travis/.gradle/caches/modules-2/files-2.1/javax.xml.stream/stax-api/1.0-2/d6337b0de8b25e53e81b922352fbea9f9f57ba0b/stax-api-1.0-2.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.codehaus.woodstox/stax2-api/3.1.4/ac19014b1e6a7c08aad07fe114af792676b685b7/stax2-api-3.1.4.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.codehaus.jettison/jettison/1.1/1a01a2a1218fcf9faa2cc2a6ced025bdea687262/jettison-1.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.google.inject/guice/3.0/9d84f15fe35e2c716a02979fb62f50a29f38aefa/guice-3.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.sonatype.sisu.inject/cglib/2.2.1-v20090111/7ce5e983fd0e6c78346f4c9cbfa39d83049dda2/cglib-2.2.1-v20090111.jar:/home/travis/.gradle/caches/modules-2/files-2.1/asm/asm/3.1/c157def142714c544bdea2e6144645702adf7097/asm-3.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.apache.httpcomponents/httpcore/4.2.4/3b7f38df6de5dd8b500e602ae8c2dd5ee446f883/httpcore-4.2.4.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.jamesmurty.utils/java-xmlbuilder/0.4/ac5962e48cdee3a0a6e1f8e00fcb594747ac5aaf/java-xmlbuilder-0.4.jar:/home/travis/.gradle/caches/modules-2/files-2.1/com.thoughtworks.paranamer/paranamer/2.3/4a85963a752c0a2f715c3924bfc686865e7e1bc6/paranamer-2.3.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.xerial.snappy/snappy-java/1.0.4.1/f88b89a5a21a466aeb0ecf0c063605bd584b4947/snappy-java-1.0.4.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/jline/jline/0.9.94/99a18e9a44834afdebc467294e1138364c207402/jline-0.9.94.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.tukaani/xz/1.0/ecff5cb8b1189514c9d1d8d68eb77ac372e000c9/xz-1.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.fusesource.leveldbjni/leveldbjni-all/1.8/707350a2eeb1fa2ed77a32ddb3893ed308e941db/leveldbjni-all-1.8.jar:/home/travis/.gradle/caches/modules-2/files-2.1/javax.activation/activation/1.1/e6cb541461c2834bdea3eb920f1884d1eb508b50/activation-1.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/javax.inject/javax.inject/1/6975da39a7040257bd51d21a231b76c915872d38/javax.inject-1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/aopalliance/aopalliance/1.0/235ba8b489512805ac13a8f9ea77a1ca5ebe3e8/aopalliance-1.0.jar:/home/travis/.gradle/caches/modules-2/files-2.1/junit/junit/3.8.1/99129f16442844f6a4a11ae22fbbee40b14d774f/junit-3.8.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-console/1.1.1/be5fc85283343805b20707480ba63bb8f6169d01/junit-platform-console-1.1.1.jar:/home/travis/.gradle/caches/modules-2/files-2.1/org.junit.platform/junit-platform-launcher/1.1.1/7ba76f577d8a2193f8e6e5a4bd0dd2a30ffce549/junit-platform-launcher-1.1.1.jar:build/tmp/expandedArchives/org.jacoco.agent-0.8.0.jar_0a1ac833cae91eb2e2152073ffb36feb/jacocoagent.jar"/>
<property name="java.class.version" value="52.0"/>
<property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/endorsed"/>
<property name="java.ext.dirs" value="/usr/lib/jvm/java-8-oracle/jre/lib/ext:/usr/java/packages/lib/ext"/>
<property name="java.home" value="/usr/lib/jvm/java-8-oracle/jre"/>
<property name="java.io.tmpdir" value="/tmp"/>
<property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib"/>
<property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/>
<property name="java.runtime.version" value="1.8.0_151-b12"/>
<property name="java.specification.name" value="Java Platform API Specification"/>
<property name="java.specification.vendor" value="Oracle Corporation"/>
<property name="java.specification.version" value="1.8"/>
<property name="java.vendor" value="Oracle Corporation"/>
<property name="java.vendor.url" value="http://java.oracle.com/"/>
<property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
<property name="java.version" value="1.8.0_151"/>
<property name="java.vm.info" value="mixed mode"/>
<property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/>
<property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
<property name="java.vm.specification.vendor" value="Oracle Corporation"/>
<property name="java.vm.specification.version" value="1.8"/>
<property name="java.vm.vendor" value="Oracle Corporation"/>
<property name="java.vm.version" value="25.151-b12"/>
<property name="line.separator" value="&#xa;"/>
<property name="os.arch" value="amd64"/>
<property name="os.name" value="Linux"/>
<property name="os.version" value="4.14.12-041412-generic"/>
<property name="path.separator" value=":"/>
<property name="sun.arch.data.model" value="64"/>
<property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/resources.jar:/usr/lib/jvm/java-8-oracle/jre/lib/rt.jar:/usr/lib/jvm/java-8-oracle/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jsse.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jce.jar:/usr/lib/jvm/java-8-oracle/jre/lib/charsets.jar:/usr/lib/jvm/java-8-oracle/jre/lib/jfr.jar:/usr/lib/jvm/java-8-oracle/jre/classes"/>
<property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-oracle/jre/lib/amd64"/>
<property name="sun.cpu.endian" value="little"/>
<property name="sun.cpu.isalist" value=""/>
<property name="sun.font.fontmanager" value="sun.awt.X11FontManager"/>
<property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
<property name="sun.java.command" value="org.junit.platform.console.ConsoleLauncher --details NONE --scan-class-path /home/travis/build/ZuInnoTe/hadoopoffice/fileformat/build/classes/java/main:/home/travis/build/ZuInnoTe/hadoopoffice/fileformat/build/resources/main:/home/travis/build/ZuInnoTe/hadoopoffice/fileformat/build/classes/java/test:/home/travis/build/ZuInnoTe/hadoopoffice/fileformat/build/resources/test -n ^.*Tests?$ --reports-dir /home/travis/build/ZuInnoTe/hadoopoffice/fileformat/build/test-results/junit-platform"/>
<property name="sun.java.launcher" value="SUN_STANDARD"/>
<property name="sun.jnu.encoding" value="UTF-8"/>
<property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
<property name="sun.os.patch.level" value="unknown"/>
<property name="user.country" value="US"/>
<property name="user.dir" value="/home/travis/build/ZuInnoTe/hadoopoffice/fileformat"/>
<property name="user.home" value="/home/travis"/>
<property name="user.language" value="en"/>
<property name="user.name" value="travis"/>
<property name="user.timezone" value="UTC"/>
<property name="user.variant" value=""/>
</properties>
<testcase name="createKeyStoreforPasswords()" classname="org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest" time="0.845">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest]/[method:createKeyStoreforPasswords()]
display-name: createKeyStoreforPasswords()
]]></system-out>
</testcase>
<testcase name="getPrivateKeyAndCertificate()" classname="org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest" time="0.033">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest]/[method:getPrivateKeyAndCertificate()]
display-name: getPrivateKeyAndCertificate()
]]></system-out>
</testcase>
<testcase name="loadExistingKeyStore()" classname="org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest]/[method:loadExistingKeyStore()]
display-name: loadExistingKeyStore()
]]></system-out>
</testcase>
<testcase name="checkCertificateAvailable()" classname="org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest]/[method:checkCertificateAvailable()]
display-name: checkCertificateAvailable()
]]></system-out>
</testcase>
<testcase name="checkKeystoreAvailable()" classname="org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest]/[method:checkKeystoreAvailable()]
display-name: checkKeystoreAvailable()
]]></system-out>
</testcase>
<testcase name="getAllX509CertificatesFromTrustStore()" classname="org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest" time="0.044">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.common.HadoopKeyStoreManagerTest]/[method:getAllX509CertificatesFromTrustStore()]
display-name: getAllX509CertificatesFromTrustStore()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormat()" classname="org.zuinnote.hadoop.office.format.common.OfficeReaderTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.common.OfficeReaderTest]/[method:readExcelInputFormat()]
display-name: readExcelInputFormat()
]]></system-out>
</testcase>
<testcase name="checkTestExcelSimpleSheetAvailable()" classname="org.zuinnote.hadoop.office.format.common.converter.ExcelConverterSimpleSpreadSheetCellDAOTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.common.converter.ExcelConverterSimpleSpreadSheetCellDAOTest]/[method:checkTestExcelSimpleSheetAvailable()]
display-name: checkTestExcelSimpleSheetAvailable()
]]></system-out>
</testcase>
<testcase name="convertCaseTestSimple()" classname="org.zuinnote.hadoop.office.format.common.converter.ExcelConverterSimpleSpreadSheetCellDAOTest" time="1.494">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.common.converter.ExcelConverterSimpleSpreadSheetCellDAOTest]/[method:convertCaseTestSimple()]
display-name: convertCaseTestSimple()
]]></system-out>
</testcase>
<testcase name="getSpreadSheetCellDAOfromSimpleDataType()" classname="org.zuinnote.hadoop.office.format.common.converter.ExcelConverterSimpleSpreadSheetCellDAOTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.common.converter.ExcelConverterSimpleSpreadSheetCellDAOTest]/[method:getSpreadSheetCellDAOfromSimpleDataType()]
display-name: getSpreadSheetCellDAOfromSimpleDataType()
]]></system-out>
</testcase>
<testcase name="verifyCertificationChainPositive()" classname="org.zuinnote.hadoop.office.format.common.util.CertificateChainVerificationUtilTest" time="0">
<skipped><![CDATA[We need to update the test certificate with certificate revocation lists (CRL)]]></skipped>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.common.util.CertificateChainVerificationUtilTest]/[method:verifyCertificationChainPositive()]
display-name: verifyCertificationChainPositive()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013MultiSheetAvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013MultiSheetAvailable()]
display-name: checkTestExcel2013MultiSheetAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheet()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.592">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheet()]
display-name: readExcelInputFormatExcel2013SingleSheet()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="2.214">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.184">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllPositive()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003LinkedWorkbook1()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003LinkedWorkbook1()]
display-name: checkTestExcel2003LinkedWorkbook1()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003LinkedWorkbook2()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.002">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003LinkedWorkbook2()]
display-name: checkTestExcel2003LinkedWorkbook2()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.256">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedNegative()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetTwoLinkedWorkbooks()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<skipped><![CDATA[This does not work yet due to a bug in Apache POI that prevents writing correct workbooks containing external references: https://bz.apache.org/bugzilla/show_bug.cgi?id=57184]]></skipped>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetTwoLinkedWorkbooks()]
display-name: writeExcelOutputFormatExcel2013SingleSheetTwoLinkedWorkbooks()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.112">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllNegative()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStorePositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.23">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStorePositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStorePositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetComment()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.448">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetComment()]
display-name: writeExcelOutputFormatExcel2013SingleSheetComment()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003MultiSheetAllLowFootPrint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.223">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003MultiSheetAllLowFootPrint()]
display-name: readExcelInputFormatExcel2003MultiSheetAllLowFootPrint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheet()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.117">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheet()]
display-name: readExcelInputFormatExcel2003SingleSheet()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003MainWorkbook()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003MainWorkbook()]
display-name: checkTestExcel2003MainWorkbook()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013MultiSheetGzipAvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013MultiSheetGzipAvailable()]
display-name: checkTestExcel2013MultiSheetGzipAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013LinkedWorkbook()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.088">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013LinkedWorkbook()]
display-name: readExcelInputFormatExcel2013LinkedWorkbook()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetSkipWithHeaderLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.063">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetSkipWithHeaderLowFootprint()]
display-name: readExcelInputFormatExcel2013MultiSheetSkipWithHeaderLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheetEncryptedNegativeLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.018">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheetEncryptedNegativeLowFootprint()]
display-name: readExcelInputFormatExcel2003SingleSheetEncryptedNegativeLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetHeader()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.048">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetHeader()]
display-name: readExcelInputFormatExcel2013MultiSheetHeader()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.054">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.575">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.045">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003LinkedWorkbook()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.019">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003LinkedWorkbook()]
display-name: readExcelInputFormatExcel2003LinkedWorkbook()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOncePositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.115">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOncePositive()]
display-name: writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOncePositive()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013MultiSheetHeaderAvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013MultiSheetHeaderAvailable()]
display-name: checkTestExcel2013MultiSheetHeaderAvailable()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003EmptySheetAvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003EmptySheetAvailable()]
display-name: checkTestExcel2003EmptySheetAvailable()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetGZipCompressed()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.099">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetGZipCompressed()]
display-name: writeExcelOutputFormatExcel2013SingleSheetGZipCompressed()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.052">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedNegative()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOnceNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.04">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOnceNegative()]
display-name: writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOnceNegative()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetAllLowFootPrint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.013">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetAllLowFootPrint()]
display-name: readExcelInputFormatExcel2013MultiSheetAllLowFootPrint()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013EmptySheetAvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013EmptySheetAvailable()]
display-name: checkTestExcel2013EmptySheetAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetSelectedSheet()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.014">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetSelectedSheet()]
display-name: readExcelInputFormatExcel2013MultiSheetSelectedSheet()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013LinkedWorkbook1()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013LinkedWorkbook1()]
display-name: checkTestExcel2013LinkedWorkbook1()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013LinkedWorkbook2()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013LinkedWorkbook2()]
display-name: checkTestExcel2013LinkedWorkbook2()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.219">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatBzip2CompressedExcel2013MultiSheetAll()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.037">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatBzip2CompressedExcel2013MultiSheetAll()]
display-name: readExcelInputFormatBzip2CompressedExcel2013MultiSheetAll()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003EmptyRowsLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003EmptyRowsLowFootprint()]
display-name: readExcelInputFormatExcel2003EmptyRowsLowFootprint()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013TemplateAvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013TemplateAvailable()]
display-name: checkTestExcel2013TemplateAvailable()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedNegativeReadLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.058">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedNegativeReadLowFootprint()]
display-name: writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedNegativeReadLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetLowFootprint()]
display-name: readExcelInputFormatExcel2013SingleSheetLowFootprint()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003SingleSheetAvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003SingleSheetAvailable()]
display-name: checkTestExcel2003SingleSheetAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatGzipCompressedExcel2013MultiSheetAll()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.019">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatGzipCompressedExcel2013MultiSheetAll()]
display-name: readExcelInputFormatGzipCompressedExcel2013MultiSheetAll()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013EmptyRows()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013EmptyRows()]
display-name: checkTestExcel2013EmptyRows()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetOneLinkedWorkbook()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.035">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetOneLinkedWorkbook()]
display-name: writeExcelOutputFormatExcel2003SingleSheetOneLinkedWorkbook()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetOneLinkedWorkbook()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<skipped><![CDATA[This does not work yet due to a bug in Apache POI that prevents writing correct workbooks containing external references: https://bz.apache.org/bugzilla/show_bug.cgi?id=57184]]></skipped>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetOneLinkedWorkbook()]
display-name: writeExcelOutputFormatExcel2013SingleSheetOneLinkedWorkbook()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.219">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetPositive()]
display-name: writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.47">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheetEncryptedPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.011">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheetEncryptedPositive()]
display-name: readExcelInputFormatExcel2003SingleSheetEncryptedPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.037">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedPositive()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetEncryptedPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.04">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetEncryptedPositive()]
display-name: writeExcelOutputFormatExcel2003SingleSheetEncryptedPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.231">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedKeyStorePositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.033">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedKeyStorePositive()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedKeyStorePositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.199">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetNegative()]
display-name: writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetNegative()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013TemplateSingleSheet()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.087">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013TemplateSingleSheet()]
display-name: writeExcelOutputFormatExcel2013TemplateSingleSheet()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetAll()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.03">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetAll()]
display-name: readExcelInputFormatExcel2013MultiSheetAll()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.203">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedNegative()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013CommentAvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013CommentAvailable()]
display-name: checkTestExcel2013CommentAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheetEncryptedNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.003">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheetEncryptedNegative()]
display-name: readExcelInputFormatExcel2003SingleSheetEncryptedNegative()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.039">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedNegative()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedNegative()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003Empty()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003Empty()]
display-name: readExcelInputFormatExcel2003Empty()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetEncryptedNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.021">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetEncryptedNegative()]
display-name: writeExcelOutputFormatExcel2003SingleSheetEncryptedNegative()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.266">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedNegative()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013LinkedWorkbooksLink2Available()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013LinkedWorkbooksLink2Available()]
display-name: checkTestExcel2013LinkedWorkbooksLink2Available()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOncePositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.037">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOncePositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOncePositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetHeaderLowFootPrint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.011">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetHeaderLowFootPrint()]
display-name: readExcelInputFormatExcel2013MultiSheetHeaderLowFootPrint()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013TemplateEncryptedAvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013TemplateEncryptedAvailable()]
display-name: checkTestExcel2013TemplateEncryptedAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013EmptyRowsLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013EmptyRowsLowFootprint()]
display-name: readExcelInputFormatExcel2013EmptyRowsLowFootprint()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetLowFootPrint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.035">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetLowFootPrint()]
display-name: writeExcelOutputFormatExcel2013SingleSheetLowFootPrint()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOnceNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.026">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOnceNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOnceNegative()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013LinkedWorkbooksLink1Available()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013LinkedWorkbooksLink1Available()]
display-name: checkTestExcel2013LinkedWorkbooksLink1Available()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013SkipSheetvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013SkipSheetvailable()]
display-name: checkTestExcel2013SkipSheetvailable()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetSignedPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.116">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetSignedPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetSignedPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheet()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.053">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheet()]
display-name: writeExcelOutputFormatExcel2013SingleSheet()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.241">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013Comment()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.032">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013Comment()]
display-name: readExcelInputFormatExcel2013Comment()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetSignedNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.058">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetSignedNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetSignedNegative()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheetEncryptedPositiveLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.021">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheetEncryptedPositiveLowFootprint()]
display-name: readExcelInputFormatExcel2003SingleSheetEncryptedPositiveLowFootprint()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.317">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetSkipWithHeader()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.016">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetSkipWithHeader()]
display-name: readExcelInputFormatExcel2013MultiSheetSkipWithHeader()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013Empty()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.007">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013Empty()]
display-name: readExcelInputFormatExcel2013Empty()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013LinkedWorkbooksAvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013LinkedWorkbooksAvailable()]
display-name: checkTestExcel2013LinkedWorkbooksAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.037">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheetLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.01">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheetLowFootprint()]
display-name: readExcelInputFormatExcel2003SingleSheetLowFootprint()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003EmptyRows()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003EmptyRows()]
display-name: checkTestExcel2003EmptyRows()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013MultiSheetBzip2Available()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013MultiSheetBzip2Available()]
display-name: checkTestExcel2013MultiSheetBzip2Available()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.03">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllPositive()]
display-name: writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013EmptyRows()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.013">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013EmptyRows()]
display-name: readExcelInputFormatExcel2013EmptyRows()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013MultiSheet()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.062">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013MultiSheet()]
display-name: writeExcelOutputFormatExcel2013MultiSheet()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013SingleSheetAvailable()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013SingleSheetAvailable()]
display-name: checkTestExcel2013SingleSheetAvailable()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013MainWorkbook()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013MainWorkbook()]
display-name: checkTestExcel2013MainWorkbook()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedPositiveReadLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.108">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedPositiveReadLowFootprint()]
display-name: writeExcelOutputFormatExcel2013SingleSheetLowFootPrintSignedPositiveReadLowFootprint()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetTwoLinkedWorkbooks()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.033">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetTwoLinkedWorkbooks()]
display-name: writeExcelOutputFormatExcel2003SingleSheetTwoLinkedWorkbooks()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetSignedCertChainPositive()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0">
<skipped><![CDATA[We need to update the test certificate with certificate revocation lists (CRL)]]></skipped>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetSignedCertChainPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetSignedCertChainPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllNegative()" classname="org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapred.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllNegative()]
display-name: writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllNegative()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013MultiSheetAvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013MultiSheetAvailable()]
display-name: checkTestExcel2013MultiSheetAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheet()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.028">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheet()]
display-name: readExcelInputFormatExcel2013SingleSheet()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.481">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.063">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllPositive()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003LinkedWorkbook1()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003LinkedWorkbook1()]
display-name: checkTestExcel2003LinkedWorkbook1()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003LinkedWorkbook2()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003LinkedWorkbook2()]
display-name: checkTestExcel2003LinkedWorkbook2()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.294">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveSignedNegative()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetTwoLinkedWorkbooks()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<skipped><![CDATA[This does not work yet due to a bug in Apache POI that prevents writing correct workbooks containing external references: https://bz.apache.org/bugzilla/show_bug.cgi?id=57184]]></skipped>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetTwoLinkedWorkbooks()]
display-name: writeExcelOutputFormatExcel2013SingleSheetTwoLinkedWorkbooks()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.043">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchAllNegative()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStorePositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.246">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStorePositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStorePositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetComment()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.046">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetComment()]
display-name: writeExcelOutputFormatExcel2013SingleSheetComment()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003MultiSheetAllLowFootPrint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.011">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003MultiSheetAllLowFootPrint()]
display-name: readExcelInputFormatExcel2003MultiSheetAllLowFootPrint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheet()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.008">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheet()]
display-name: readExcelInputFormatExcel2003SingleSheet()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003MainWorkbook()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003MainWorkbook()]
display-name: checkTestExcel2003MainWorkbook()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013MultiSheetGzipAvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013MultiSheetGzipAvailable()]
display-name: checkTestExcel2013MultiSheetGzipAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013LinkedWorkbook()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.027">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013LinkedWorkbook()]
display-name: readExcelInputFormatExcel2013LinkedWorkbook()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetSkipWithHeaderLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.014">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetSkipWithHeaderLowFootprint()]
display-name: readExcelInputFormatExcel2013MultiSheetSkipWithHeaderLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheetEncryptedNegativeLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.004">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheetEncryptedNegativeLowFootprint()]
display-name: readExcelInputFormatExcel2003SingleSheetEncryptedNegativeLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetHeader()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.013">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetHeader()]
display-name: readExcelInputFormatExcel2013MultiSheetHeader()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.028">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.041">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003LinkedWorkbook()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.019">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003LinkedWorkbook()]
display-name: readExcelInputFormatExcel2003LinkedWorkbook()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOncePositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.061">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOncePositive()]
display-name: writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOncePositive()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013MultiSheetHeaderAvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013MultiSheetHeaderAvailable()]
display-name: checkTestExcel2013MultiSheetHeaderAvailable()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedNegativeReadLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.055">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedNegativeReadLowFootprint()]
display-name: writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedNegativeReadLowFootprint()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003EmptySheetAvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003EmptySheetAvailable()]
display-name: checkTestExcel2003EmptySheetAvailable()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetGZipCompressed()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.044">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetGZipCompressed()]
display-name: writeExcelOutputFormatExcel2013SingleSheetGZipCompressed()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOnceNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.033">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOnceNegative()]
display-name: writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchOnceNegative()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetAllLowFootPrint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetAllLowFootPrint()]
display-name: readExcelInputFormatExcel2013MultiSheetAllLowFootPrint()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013EmptySheetAvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013EmptySheetAvailable()]
display-name: checkTestExcel2013EmptySheetAvailable()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetEncryptedPositiveLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.035">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetEncryptedPositiveLowFootprint()]
display-name: writeExcelOutputFormatExcel2003SingleSheetEncryptedPositiveLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetSelectedSheet()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.023">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetSelectedSheet()]
display-name: readExcelInputFormatExcel2013MultiSheetSelectedSheet()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013LinkedWorkbook1()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013LinkedWorkbook1()]
display-name: checkTestExcel2013LinkedWorkbook1()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013LinkedWorkbook2()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013LinkedWorkbook2()]
display-name: checkTestExcel2013LinkedWorkbook2()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.232">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatBzip2CompressedExcel2013MultiSheetAll()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.02">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatBzip2CompressedExcel2013MultiSheetAll()]
display-name: readExcelInputFormatBzip2CompressedExcel2013MultiSheetAll()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003EmptyRowsLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.007">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003EmptyRowsLowFootprint()]
display-name: readExcelInputFormatExcel2003EmptyRowsLowFootprint()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013TemplateAvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013TemplateAvailable()]
display-name: checkTestExcel2013TemplateAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetLowFootPrint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.032">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetLowFootPrint()]
display-name: readExcelInputFormatExcel2013SingleSheetLowFootPrint()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003SingleSheetAvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003SingleSheetAvailable()]
display-name: checkTestExcel2003SingleSheetAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatGzipCompressedExcel2013MultiSheetAll()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.016">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatGzipCompressedExcel2013MultiSheetAll()]
display-name: readExcelInputFormatGzipCompressedExcel2013MultiSheetAll()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013EmptyRows()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013EmptyRows()]
display-name: checkTestExcel2013EmptyRows()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetOneLinkedWorkbook()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.089">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetOneLinkedWorkbook()]
display-name: writeExcelOutputFormatExcel2003SingleSheetOneLinkedWorkbook()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetOneLinkedWorkbook()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<skipped><![CDATA[This does not work yet due to a bug in Apache POI that prevents writing correct workbooks containing external references: https://bz.apache.org/bugzilla/show_bug.cgi?id=57184]]></skipped>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetOneLinkedWorkbook()]
display-name: writeExcelOutputFormatExcel2013SingleSheetOneLinkedWorkbook()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.155">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetPositive()]
display-name: writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.507">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheetEncryptedPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.005">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheetEncryptedPositive()]
display-name: readExcelInputFormatExcel2003SingleSheetEncryptedPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.037">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedPositive()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetEncryptedPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.05">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetEncryptedPositive()]
display-name: writeExcelOutputFormatExcel2003SingleSheetEncryptedPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.221">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedKeyStorePositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.029">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedKeyStorePositive()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedKeyStorePositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.296">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetNegative()]
display-name: writeExcelOutputFormatExcel2013TemplateEncryptedSingleSheetNegative()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013TemplateSingleSheet()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.106">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013TemplateSingleSheet()]
display-name: writeExcelOutputFormatExcel2013TemplateSingleSheet()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetAll()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.017">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetAll()]
display-name: readExcelInputFormatExcel2013MultiSheetAll()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.261">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedPositiveLowFootprintSignedNegative()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013CommentAvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013CommentAvailable()]
display-name: checkTestExcel2013CommentAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheetEncryptedNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.006">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheetEncryptedNegative()]
display-name: readExcelInputFormatExcel2003SingleSheetEncryptedNegative()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.044">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedNegative()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedNegative()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003Empty()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003Empty()]
display-name: readExcelInputFormatExcel2003Empty()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetEncryptedNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.058">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetEncryptedNegative()]
display-name: writeExcelOutputFormatExcel2003SingleSheetEncryptedNegative()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.326">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedNegative()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013LinkedWorkbooksLink2Available()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013LinkedWorkbooksLink2Available()]
display-name: checkTestExcel2013LinkedWorkbooksLink2Available()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOncePositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.065">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOncePositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOncePositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetHeaderLowFootPrint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.013">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetHeaderLowFootPrint()]
display-name: readExcelInputFormatExcel2013MultiSheetHeaderLowFootPrint()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013TemplateEncryptedAvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013TemplateEncryptedAvailable()]
display-name: checkTestExcel2013TemplateEncryptedAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013EmptyRowsLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.006">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013EmptyRowsLowFootprint()]
display-name: readExcelInputFormatExcel2013EmptyRowsLowFootprint()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.075">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetLowFootprint()]
display-name: writeExcelOutputFormatExcel2013SingleSheetLowFootprint()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOnceNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.068">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOnceNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetMetaDataMatchOnceNegative()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013LinkedWorkbooksLink1Available()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013LinkedWorkbooksLink1Available()]
display-name: checkTestExcel2013LinkedWorkbooksLink1Available()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013SkipSheetvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013SkipSheetvailable()]
display-name: checkTestExcel2013SkipSheetvailable()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetSignedPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.138">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetSignedPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetSignedPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheet()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.068">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheet()]
display-name: writeExcelOutputFormatExcel2013SingleSheet()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.216">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedKeyStoreAliasPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013Comment()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013Comment()]
display-name: readExcelInputFormatExcel2013Comment()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetSignedNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.03">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetSignedNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetSignedNegative()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheetEncryptedPositiveLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.014">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheetEncryptedPositiveLowFootprint()]
display-name: readExcelInputFormatExcel2003SingleSheetEncryptedPositiveLowFootprint()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.307">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()]
display-name: writeExcelOutputFormatExcel2013SingleSheetEncryptedNegativeLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013MultiSheetSkipWithHeader()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.012">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013MultiSheetSkipWithHeader()]
display-name: readExcelInputFormatExcel2013MultiSheetSkipWithHeader()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013Empty()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.006">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013Empty()]
display-name: readExcelInputFormatExcel2013Empty()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013LinkedWorkbooksAvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013LinkedWorkbooksAvailable()]
display-name: checkTestExcel2013LinkedWorkbooksAvailable()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.026">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()]
display-name: readExcelInputFormatExcel2013SingleSheetEncryptedPositiveLowFootprint()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedPositiveReadLowFootprint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.134">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedPositiveReadLowFootprint()]
display-name: writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedPositiveReadLowFootprint()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2003SingleSheetLowFootPrint()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.01">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2003SingleSheetLowFootPrint()]
display-name: readExcelInputFormatExcel2003SingleSheetLowFootPrint()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2003EmptyRows()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2003EmptyRows()]
display-name: checkTestExcel2003EmptyRows()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013MultiSheetBzip2Available()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013MultiSheetBzip2Available()]
display-name: checkTestExcel2013MultiSheetBzip2Available()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.108">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.023">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllPositive()]
display-name: writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllPositive()
]]></system-out>
</testcase>
<testcase name="readExcelInputFormatExcel2013EmptyRows()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.009">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:readExcelInputFormatExcel2013EmptyRows()]
display-name: readExcelInputFormatExcel2013EmptyRows()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013MultiSheet()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.03">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013MultiSheet()]
display-name: writeExcelOutputFormatExcel2013MultiSheet()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013SingleSheetAvailable()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013SingleSheetAvailable()]
display-name: checkTestExcel2013SingleSheetAvailable()
]]></system-out>
</testcase>
<testcase name="checkTestExcel2013MainWorkbook()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.001">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:checkTestExcel2013MainWorkbook()]
display-name: checkTestExcel2013MainWorkbook()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetTwoLinkedWorkbooks()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.153">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetTwoLinkedWorkbooks()]
display-name: writeExcelOutputFormatExcel2003SingleSheetTwoLinkedWorkbooks()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetSignedCertChainPositive()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0">
<skipped><![CDATA[We need to update the test certificate with certificate revocation lists (CRL)]]></skipped>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetSignedCertChainPositive()]
display-name: writeExcelOutputFormatExcel2013SingleSheetSignedCertChainPositive()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.053">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedNegative()]
display-name: writeExcelOutputFormatExcel2013SingleSheetLowFootprintSignedNegative()
]]></system-out>
</testcase>
<testcase name="writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllNegative()" classname="org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest" time="0.049">
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]/[class:org.zuinnote.hadoop.office.format.mapreduce.OfficeFormatHadoopExcelTest]/[method:writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllNegative()]
display-name: writeExcelOutputFormatExcel2003SingleSheetMetaDataMatchAllNegative()
]]></system-out>
</testcase>
<system-out><![CDATA[
unique-id: [engine:junit-jupiter]
display-name: JUnit Jupiter
]]></system-out>
</testsuite>
